{"version":3,"sources":["logo.svg","components/Tile.js","components/GameBoard.js","components/memory_game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Tile","props","react_default","a","createElement","className","id","concat","rowIndex","tileIndex","value","valueOfTile","onClick","event","tileClickEvent","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showTile","document","getElementById","target","innerHTML","console","log","state","click1","tempClick1","position","setState","click2","tempClick2","setTimeout","tile1","tile2","clearedClick1","clearedClick2","gameBoard","num","show","_this2","map","row","tile","components_Tile","React","Component","MemoryGame","components_GameBoard","App","memory_game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.467ddef4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport '../styles/tile.css';\n\nconst Tile = (props) => {\n\n    return (\n       <button className='tile' id={`${props.rowIndex}${props.tileIndex}`} value={props.valueOfTile} onClick={(event)=>{props.tileClickEvent(event)}}></button> \n    )\n};\n\nexport default Tile;","import React from 'react';\nimport Tile from './Tile.js';\nimport '../styles/gameBoard.css'\n\nclass GameBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameBoard: [\n                [{ num: '1',show:false }, { num: '2' }, { num: '3' }, { num: '4' }],\n                [{ num: '2' }, { num: '6' }, { num: '1' }, { num: '2' }],\n                [{ num: '3' }, { num: '4' }, { num: '5' }, { num: '6' }]\n            ],\n            click1:{value:'',position:''}, \n            click2:{value:'',position:''},\n        };\n    }\n    \n    tileClickEvent = (event) => {\n        \n        function showTile(){\n        return (\n            document.getElementById(`${event.target.id}`).innerHTML = `${event.target.value}`\n            );\n        };\n        \n        function hideTile(tile1, tile2){\n        return (\n            //console.log('tile shows' + tile1 + ' : ' + tile2)\n            document.getElementById(tile1).innerHTML = '',\n            document.getElementById(tile2).innerHTML = ''\n            );\n        }\n        \n        console.log(`${event.target.id}${event.target.value}`)\n        \n        if(this.state.click1.value===''){\n          \n          var tempClick1=this.state.click1;\n          tempClick1.value=event.target.value;\n          tempClick1.position=event.target.id;\n           \n          \n          this.setState({click1: tempClick1});\n           \n          showTile();\n        } else if(this.state.click2.value===''){\n          //this.setState({click2:event.target.value});\n          \n          var tempClick2=this.state.click2;\n          tempClick2.value=event.target.value;\n          tempClick2.position=event.target.id;\n           \n          this.setState({click2: tempClick2});\n         \n          showTile();\n          // wait here for a bit\n          setTimeout(()=>{\n              // hide tiles\n              console.log('waiting inside');\n              if(this.state.click1.value !== this.state.click2.value){\n                 console.log('in the if');\n                 hideTile(this.state.click1.position, this.state.click2.position);\n              }\n\n          \n          /* Reset Click thingy */    \n          var clearedClick1={};\n          clearedClick1.value='';\n          clearedClick1.position='';\n          \n          var clearedClick2={};\n          clearedClick2.value='';\n          clearedClick2.position='';\n          \n          this.setState({click1: clearedClick1,click2:clearedClick2});\n             \n              \n          },2000);\n          console.log('waiting outside')\n        } else {\n            //alert('hold on a minute');\n            console.log('clcikihui');\n        }\n        \n        \n    }\n\n    render() {\n\n        return (\n            <div>\n            <h1>Game Board this is</h1>\n            {\n                this.state.gameBoard.map(\n                (row,rowIndex)=>\n                {\n                   //console.log(tile);\n                   return(\n                     <div className='gameBoardRow'>\n                    {row.map((tile,tileIndex)=>{return (<Tile rowIndex={rowIndex} tileIndex={tileIndex} valueOfTile={tile.num} tileClickEvent={this.tileClickEvent}/>);})}\n                     </div>\n                     );\n                }\n                )\n            }\n            </div>); /* outer return */\n    } /* render */\n\n\n\n\n}; /* class GameBoard  */\n\nexport default GameBoard;\n","import React, { Component } from 'react';\nimport GameBoard from './GameBoard';\n\nclass MemoryGame extends React.Component {\n\n\n    render() {\n        console.log('MemoryGame.js render()');\n        return (\n            <div>\n          <h1>Memory Game</h1>\n           <GameBoard/>\n            </div>\n        );\n    }\n}\n\nexport default MemoryGame;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MemoryGame from './components/memory_game.js';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <MemoryGame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}