{"version":3,"sources":["components/GitHubScoreSearch.js","components/GitHubScoreResult.js","components/GitHubScoreApp.js","App.js","serviceWorker.js","index.js"],"names":["GitHubScoreSearch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","search_query","target","value","submit_function","preventDefault","search_function","state","search_submit_button","react_default","a","createElement","id","name","disabled","search_input_field","type","user_input","onChange","search_form","onSubmit","componentStyle","width","float","style","React","Component","GitHubScoreResult","result_display","search_results","queriedUser","userExists","userScore","scoreMessage","scoreMessageStyle","usersRepos","length","usersfollowers","color","GitHubScoreApp","getDataForScore","userName","getUsersRepos","getUsersFollowerState","ghUsersReposApiURL","concat","axios","get","then","response","data","concatedUserReposArray","catch","error","console","log","ghUsersFollowersApiURL","items","usersData","appStyle","height","components_GitHubScoreSearch","components_GitHubScoreResult","App","components_GitHubScoreApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e11a4b99.chunk.js","sourcesContent":["import React from 'react';\n\nclass GitHubScoreSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {search_query:''};\n  }\n  \n  handleChange = (event) => {\n     this.setState({search_query:event.target.value});\n  }\n\n  submit_function = (event) => {\n     event.preventDefault();\n     this.props.search_function(this.state.search_query); \n     this.setState({search_query:''});\n  }\n\n  search_submit_button = () => {\n    return (\n      <div id='search_button'>\n      <button name='search_submit' disabled={this.state.search_query ? false : true}>Calculate user's GitHub Score</button>\n      </div>\n      );\n  }\n\n  search_input_field = () => {\n    return (\n      <div id='search_field'>\n         <p>GitHub Username :&nbsp;\n         <input type='text' name='search_query' value={this.state.user_input} onChange={this.handleChange}/>\n         </p>\n      </div>\n      );\n  }\n  \n  search_form = () => {\n    return (\n      <div id='search_field'>\n         <form onSubmit={this.submit_function}>\n         {this.search_input_field()}\n         {this.search_submit_button()}\n         </form>\n      </div>\n      );\n    \n  }\n\n   componentStyle = () => {\n    /*\n      border: '2px solid green',\n    */\n    const simpleStyle = {\n      width: '45%',\n      float: 'left',\n    };\n    return simpleStyle;\n  }\n  \n  render() {\n    return (\n        <div id=\"search_form\" style={this.componentStyle()}>\n        <h1>GitHub Score</h1>\n        {this.search_form()}\n      </div>\n    );\n  }\n}\n\nexport default GitHubScoreSearch;\n","import React from 'react';\n\nconst GitHubScoreResult = (props) => {\n\n    let result_display = '';\n\n    if (props.search_results.queriedUser === '') {\n        result_display = '';\n    }\n    else {\n        if (props.search_results.userExists) {\n            let userScore = 0;\n            userScore = props.search_results.usersRepos.length + props.search_results.usersfollowers.length;\n\n            let scoreMessage = ``;\n            let scoreMessageStyle = {};\n            if (userScore < 20) {\n                scoreMessage = 'Needs Work!';\n                scoreMessageStyle = { color: 'red', };\n            }\n            else if (userScore < 50) {\n                scoreMessage = 'Doing Good!';\n                scoreMessageStyle = { color: 'orange', };\n            }\n            else if (userScore < 100) {\n                scoreMessage = 'Great Job!';\n                scoreMessageStyle = { color: 'black', };\n            }\n            else if (userScore <= 200) {\n                scoreMessage = 'Great Job!';\n                scoreMessageStyle = { color: 'green', };\n            }\n            else {\n                scoreMessage = 'GitHub Elite!';\n                scoreMessageStyle = { color: 'blue', };\n            }\n\n            result_display = <div>\n                             <h2>{props.search_results.queriedUser} </h2>\n                                 <br></br>\n                                 <h1>score : {userScore}</h1>\n                                 <br></br>\n                                 <h2 style={scoreMessageStyle}>{scoreMessage}</h2>\n                             </div>;\n        }\n        else {\n            result_display = <p>user does not exists</p>;\n        }\n    }\n\n    /*\n      border: '2px solid green',\n    */\n    let simpleStyle = {\n        width: '45%',\n        float: 'right',\n    };\n\n    return (\n        <div id=\"result_div\" style={simpleStyle}>\n      {result_display}\n      </div>\n    );\n};\n\nexport default GitHubScoreResult;\n","import React from 'react';\nimport axios from 'axios';\nimport GitHubScoreSearch from './GitHubScoreSearch.js';\nimport GitHubScoreResult from './GitHubScoreResult.js';\n\nclass GitHubScoreApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      queriedUser: '',\n      userExists: null,\n      usersData: {},\n      usersRepos: [],\n      usersfollowers: [],\n    };\n  }\n\n  getDataForScore = (userName) => {\n    this.getUsersRepos(userName);\n    this.getUsersFollowerState(userName);\n  }\n\n  getUsersRepos = (userName) => {\n    let ghUsersReposApiURL = `https://api.github.com/users/${userName}/repos?per_page=100`;\n\n    axios.get(`${ghUsersReposApiURL}`)\n      .then((response) => {\n        this.setState({ usersRepos: response.data });\n\n        /* Deal w. users having more than 100 repos */\n        if (response.data.length > 99) {\n          ghUsersReposApiURL = `https://api.github.com/users/${userName}/repos?per_page=100&page=2`;\n          axios.get(`${ghUsersReposApiURL}`)\n            .then((response) => {\n              let concatedUserReposArray = this.state.usersRepos.concat(response.data);\n              this.setState({ usersRepos: concatedUserReposArray });\n            })\n            .catch(function(error) {\n              // handle error\n              console.log(error);\n            })\n            .then(function() {\n              // always executed\n            });\n        }\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  getUsersFollowerState = (userName) => {\n    let ghUsersFollowersApiURL = `https://api.github.com/users/${userName}/followers`;\n\n    axios.get(`${ghUsersFollowersApiURL}`)\n      .then((response) => {\n        this.setState({ usersfollowers: response.data });\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  search_function = (search_query) => {\n    const ghUserApiURL = 'https://api.github.com/search/users?q=';\n    let userName = `${search_query}`;\n\n    axios.get(`${ghUserApiURL}${userName}`)\n      .then((response) => {\n        if (response.data.items.length > 0) {\n          this.setState({ queriedUser: search_query, userExists: true, usersData: response.data.items });\n          this.getDataForScore(userName);\n        }\n        else {\n          this.setState({ queriedUser: search_query, userExists: false, usersData: {} });\n        }\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  appStyle = () => {\n    /*\n      border: '2px solid black',\n    */\n    const simpleStyle = {\n      width: '90%',\n      height: '200px',\n    };\n    return simpleStyle;\n  }\n\n  render() {\n\n    return (\n      <div id=\"app_wrapper\" style={this.appStyle()}>\n      <GitHubScoreSearch search_function={this.search_function}/>\n      <GitHubScoreResult search_results={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default GitHubScoreApp;\n","import React from 'react';\nimport GitHubScoreApp from './components/GitHubScoreApp.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div id=\"app\">\n      <GitHubScoreApp/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}